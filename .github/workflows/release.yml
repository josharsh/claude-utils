name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: claude-utils
            archive: claude-utils-linux-x64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: claude-utils.exe
            archive: claude-utils-windows-x64.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: claude-utils
            archive: claude-utils-macos-x64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: claude-utils
            archive: claude-utils-macos-arm64.tar.gz

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install Dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-xfixes0-dev libxcb-shape0-dev
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Package (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../${{ matrix.archive }} ${{ matrix.binary }}
        cd ../../..
    
    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.archive }} ${{ matrix.binary }}
        cd ../../..
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.archive }}
        asset_name: ${{ matrix.archive }}
        asset_content_type: application/gzip